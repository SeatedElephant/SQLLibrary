SET NOCOUNT ON

--declare @BackupFolder VARCHAR(MAX) = '\\rynagsrvqlik001\Backups\0003 Backup'
DECLARE @BackupFolder VARCHAR(MAX) = 'C:\Backup0003\'
DECLARE @BackupFilePattern VARCHAR(MAX) = '*.bak'
DECLARE @Overwrite INT = 0
DECLARE @DropDatabaseFirst INT = 0
DECLARE @IncludeMoveOperation INT = 1
DECLARE @Debug INT = 0

PRINT '--BackupFile restore (JensS@Microsoft.com), 08.09.2011 V0.2'
PRINT '--========================================================='

IF (@BackupFilePattern IS NULL)
BEGIN
	RAISERROR (
			'No BackupFilePattern was passed, using the default wildcard pattern *.bak'
			,10
			,1
			)

	SET @BackupFilePattern = '*.bak'
END

/* DECLARE Variables*/
DECLARE @FileCounter INT = 0
DECLARE @BackupCommand NVARCHAR(MAX) = ''
DECLARE @BackupFile NVARCHAR(MAX) = ''
DECLARE @DatabaseName SYSNAME = ''
DECLARE @IncludeMoveOperationScript NVARCHAR(MAX) = ''
DECLARE @dirList TABLE (
	id INT identity(1, 1)
	,dirline NVARCHAR(MAX)
	,isFile BIT
	)
DECLARE @Files TABLE (
	id INT identity(1, 1)
	,NAME NVARCHAR(MAX)
	)
DECLARE @RestoreInformation TABLE (
	LogicalName NVARCHAR(128)
	,PhysicalName NVARCHAR(260)
	,Type CHAR(1)
	,FileGroupName NVARCHAR(128)
	,Size NUMERIC(20, 0)
	,MaxSize NUMERIC(20, 0)
	,FileID BIGINT
	,CreateLSN NUMERIC(25, 0)
	,DropLSN NUMERIC(25, 0)
	,UniqueID UNIQUEIDENTIFIER
	,ReadOnlyLSN NUMERIC(25, 0)
	,ReadWriteLSN NUMERIC(25, 0)
	,BackupSizeInBytes BIGINT
	,SourceBlockSize INT
	,FileGroupID INT
	,LogGroupGUID UNIQUEIDENTIFIER
	,DifferentialBaseLSN NUMERIC(25, 0)
	,DifferentialBaseGUID UNIQUEIDENTIFIER
	,IsReadOnly BIT
	,IsPresent BIT
	,TDEThumbprint VARBINARY(32)
	)
DECLARE @BackupHeader TABLE (
	BackupName NVARCHAR(128)
	,BackupDescription NVARCHAR(255)
	,BackupType SMALLINT
	,ExpirationDate DATETIME
	,Compressed BIT
	,Position SMALLINT
	,DeviceType TINYINT
	,UserName NVARCHAR(128)
	,ServerName NVARCHAR(128)
	,DatabaseName NVARCHAR(128)
	,DatabaseVersion INT
	,DatabaseCreationDate DATETIME
	,BackupSize NUMERIC(20, 0)
	,FirstLSN NUMERIC(25, 0)
	,LastLSN NUMERIC(25, 0)
	,CheckpointLSN NUMERIC(25, 0)
	,DatabaseBackupLSN NUMERIC(25, 0)
	,BackupStartDate DATETIME
	,BackupFinishDate DATETIME
	,SortOrder SMALLINT
	,CodePage SMALLINT
	,UnicodeLocaleId INT
	,UnicodeComparisonStyle INT
	,CompatibilityLevel TINYINT
	,SoftwareVendorId INT
	,SoftwareVersionMajor INT
	,SoftwareVersionMinor INT
	,SoftwareVersionBuild INT
	,MachineName NVARCHAR(128)
	,Flags INT
	,BindingID UNIQUEIDENTIFIER
	,RecoveryForkID UNIQUEIDENTIFIER
	,Collation NVARCHAR(128)
	,FamilyGUID UNIQUEIDENTIFIER
	,HasBulkLoggedData BIT
	,IsSnapshot BIT
	,IsReadOnly BIT
	,IsSingleUser BIT
	,HasBackupChecksums BIT
	,IsDamaged BIT
	,BeginsLogChain BIT
	,HasIncompleteMetaData BIT
	,IsForceOffline BIT
	,IsCOpyOnly BIT
	,FirstRecoveryForkID UNIQUEIDENTIFIER
	,ForkPointLSN NUMERIC(25, 0) NULL
	,RecoveryModel NVARCHAR(60)
	,DifferentialBaseLSN NUMERIC(25, 0) NULL
	,DifferentialBaseGUID UNIQUEIDENTIFIER
	,BackupTypeDescription NVARCHAR(60)
	,BackupSetGUID UNIQUEIDENTIFIER
	,CompressedBackupSize BIGINT
	)

SET @BackupFilePattern = 'xp_cmdshell ''dir ' + @BackupFolder + @BackupFilePattern + ''''

/* Get all the files within the pattern */
INSERT INTO @dirList (dirline)
EXEC (@BackupFilePattern)
	/* Filter the shell output to files only */
	;

WITH TempTable (
	id
	,dirline
	)
AS (
	SELECT id
		,dirline
	FROM @dirList
	WHERE id > (
			SELECT MIN(id)
			FROM @dirList
			WHERE dirline LIKE '%Directory of%'
			)
		AND id < (
			SELECT MAX(id) - 2
			FROM @dirList
			)
		AND dirline IS NOT NULL
	)
INSERT INTO @Files (NAME)
SELECT dirline = @BackupFolder + (
		CASE 
			WHEN T.dirline LIKE '__/__/%'
				THEN SUBSTRING(T.dirline, 37, 100)
			ELSE SUBSTRING(T.dirline, 37, 100)
			END
		)
FROM TempTable T
INNER JOIN @dirList d ON d.id = T.id;

/* Get the number of real files*/
SET @FileCounter = @@ROWCOUNT

IF (@FileCounter = 0)
BEGIN
	RAISERROR (
			'No files with the pattern found. The dir of the passed directory comes back with the following information'
			,10
			,1
			)

	SELECT @BackupFilePattern

	--EXEC(@BackupFilePattern)      
	RETURN
END

WHILE @FileCounter > 0
BEGIN
	SELECT @BackupFile = NAME
	FROM @Files
	WHERE id = @FileCounter

	PRINT '--Generating command for found file ' + @BackupFile

	/* Create the Backup command */
	INSERT INTO @RestoreInformation
	EXEC sp_executesql N'RESTORE FILELISTONLY FROM DISK = @BackupFile'
		,N'@BackupFile NVARCHAR(MAX)'
		,@BackupFile

	SET @IncludeMoveOperationScript = ''

	IF @IncludeMoveOperation = 0x1
	BEGIN
		SELECT @IncludeMoveOperationScript += CHAR(13) + ' MOVE ' + QUOTENAME(R.LogicalName, CHAR(39)) + ' TO ' + QUOTENAME(R.PhysicalName, CHAR(39)) + ','
		FROM @RestoreInformation R
	END

	INSERT INTO @BackupHeader
	EXEC sp_executesql N'RESTORE HEADERONLY FROM DISK = @BackupFile'
		,N'@BackupFile NVARCHAR(MAX)'
		,@BackupFile

	SELECT @DatabaseName = DatabaseName
	FROM @BackupHeader

	IF @DropDatabaseFirst = 0x1
		SET @BackupCommand = 'ALTER DATABASE [' + @DatabaseName + '] SET SINGLE_USER WITH ROLLBACK IMMEDIATE; ' + CHAR(13) + 'DROP DATABASE [' + @DatabaseName + '];' + CHAR(13)
	ELSE
		SET @BackupCommand = ''

	SET @BackupCommand += 'RESTORE DATABASE [' + @DatabaseName + '] FROM DISK=' + QUOTENAME(@BackupFile, CHAR(39)) + ' WITH NOUNLOAD, ' + CASE 
			WHEN @Overwrite = 0x1
				THEN 'REPLACE,'
			ELSE ''
			END + @IncludeMoveOperationScript + ' STATS = 10'

	IF @Debug = 0x1
		SELECT @BackupCommand
	ELSE
		PRINT (@BackupCommand)

	PRINT CHAR(13)

	/* Decrement counter for the next file*/
	SET @FileCounter -= 1

	/* Clean the house */
	DELETE
	FROM @RestoreInformation

	DELETE
	FROM @BackupHeader

	SET @BackupCommand = ''
END
